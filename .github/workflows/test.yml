# This is a basic workflow to help you get started with Actions

name: test & test-publish

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, ]
  pull_request:
    branches: [ main, ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:

    # The type of runner that the job will run on
    strategy:
      matrix:
        python-versions: [3.7, 3.8, 3.9]
        os: [ubuntu-18.04, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-versions }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-versions }}

      # know more at https://github.com/snok/install-poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.0a2
          virtualenvs-create: true
          virtualenvs-in-project: false
          # virtualenvs-path: ~/my-custom-path  # can use it for caching ... todo: later
          installer-parallel: true

      - name: Install test dependencies
        run: poetry install --with test

      - name: Test with PyTest
        run: poetry run pytest

  publish_dev_build:
    # if test failed, we should not publish
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      # know more at https://github.com/snok/install-poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.0a2
          virtualenvs-create: true
          virtualenvs-in-project: false
          # virtualenvs-path: ~/my-custom-path  # can use it for caching ... todo: later
          installer-parallel: true

      - name: Install build dependencies
        run: poetry install --with build

      - name: Build wheels and source tarball
        run: |
          poetry version $(poetry version --short)-dev.$GITHUB_RUN_NUMBER
          poetry version --short
          poetry build

      - name: Check wheels and source tarball
        run: poetry run twine check dist/*

      - name: List files
        run: |
          cd test
          ls -l .
          cd ..

      # Know more at https://github.com/pypa/gh-action-pypi-publish
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN}}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true
          verbose: true
